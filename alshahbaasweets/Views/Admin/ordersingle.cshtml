@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!DOCTYPE html>
<html lang="en">

<body>

    <!-- Main Content -->
    <div class="container mt-5">
        <h2 class="mb-4">Order Details</h2>
        <div id="orderDetails" class="mt-4">
            <!-- Order details will be displayed here -->
        </div>
    </div>

    <!-- HTML & JavaScript Code -->
    <script>
        // Function to get the order ID from local storage
        function getOrderIdFromStorage() {
            return localStorage.getItem('orderId');
        }

        // Function to update the order status
        async function updateOrderStatus(newStatus) {
            const orderId = getOrderIdFromStorage();
            if (!orderId) {
                alert("Error: Order ID is missing.");
                return;
            }

            try {
                const statusUpdate = { Status: newStatus }; // Create the status update object

                // Make a PUT request to update the order status
                const response = await fetch(`http://localhost:5097/api/Order/UpdateOrderStatus/${orderId}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(statusUpdate)
                });

                if (response.ok) {
                    alert("Order status updated successfully!");
                    fetchOrderDetails(); // Refresh the order details
                } else {
                    const error = await response.json();
                    alert(`Error updating order status: ${error.message}`);
                }
            } catch (error) {
                console.error("Error updating order status:", error);
                alert("An error occurred while updating the order status.");
            }
        }

        // Function to fetch and display order details
        // Function to fetch and display order details
        async function fetchOrderDetails() {
            const orderId = getOrderIdFromStorage();
            if (!orderId) {
                document.getElementById("orderDetails").innerHTML = "<p class='text-danger'>Error: Order ID is missing.</p>";
                return;
            }

            try {
                const response = await fetch(`http://localhost:5097/api/Order/GetOrderDetails/${orderId}`);
                const data = await response.json();

                if (!data || !data.items || !Array.isArray(data.items)) {
                    document.getElementById("orderDetails").innerHTML = "<p class='text-danger'>Error: Order items not found or invalid format.</p>";
                    return;
                }

                // Format the order date
                const orderDate = new Date(data.date);
                const formattedDate = orderDate.toLocaleString('en-US', {
                    weekday: 'short', // 'Mon', 'Tue', etc.
                    year: 'numeric', // '2024'
                    month: 'short', // 'Dec'
                    day: 'numeric', // '6'
                    hour: '2-digit', // '08'
                    minute: '2-digit', // '00'
                    hour12: true // Use 12-hour clock with AM/PM
                });

                // Calculate the total price of all items
                let itemsTotal = 0;
                const items = data.items; // Access the items array directly

                items.forEach(item => {
                    const itemTotal = (item.quantity || 0) * (item.price || 0);
                    itemsTotal += itemTotal;
                });

                // Calculate the final total amount (Delivery Cost + Items Total)
                const deliveryCost = data.deliveryCost || 0;
                const finalTotalAmount = deliveryCost + itemsTotal;

                // Build the HTML for order details
                let orderDetailsHTML = `
                            <div class="card">
                                <div class="card-body">
                                    <h4 class="card-title">Order ID: ${data.orderId}</h4>
                                    <p><strong>Order Date:</strong> ${formattedDate}</p> <!-- Display the formatted date -->
                                    <p><strong>Customer Name:</strong> ${data.user?.name || "N/A"}</p>
                                    <p><strong>Phone Number:</strong> ${data.phoneNumber || "N/A"}</p>
                                    <p><strong>Branch for customer pickup:</strong> ${data.branch || "N/A"}</p>
                                    <p><strong>Nearest Branch:</strong> ${data.nearestBranch || "N/A"}</p>
                                    <p><strong>Delivery Address:</strong> ${data.address || "N/A"}</p>
                                    <p><strong>Region:</strong> ${data.regionName || "N/A"}</p>
                                    <p><strong>Delivery Cost:</strong> ${deliveryCost.toFixed(2)} JD</p>
                                    <p><strong>Status:</strong>
                                        <select id="statusDropdown" onchange="updateOrderStatus(this.value)">
                                            <option value="0" ${data.status === "Pending" ? "selected" : ""}>Pending</option>
                                            <option value="1" ${data.status === "Completed" ? "selected" : ""}>Completed</option>
                                        </select>
                                    </p>
                                </div>
                            </div>
                            <h5 class="mt-4">Order Items</h5>
                            <table class="table table-hover table-bordered">
                                <thead>
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Total</th>
                                        <th>Amount (grams)</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;

                // Add items to the table if they exist
                if (items.length > 0) {
                    items.forEach(item => {
                        const price = parseFloat(item.price) || 0; // Ensure price is numeric
                        const quantity = parseInt(item.quantity, 10) || 0; // Ensure quantity is numeric
                        const total = (price * quantity).toFixed(2); // Calculate Total dynamically

                        orderDetailsHTML += `
                <tr>
                    <td>${item.productName || "N/A"}</td> <!-- Product Name -->
                    <td>${quantity}</td> <!-- Quantity -->
                    <td>${price.toFixed(2)} JD</td> <!-- Price -->
                    <td>${total} JD</td> <!-- Total -->
                    <td>${item.amount || "N/A"} g</td> <!-- Amount (grams) -->
                </tr>`;
                    });

                } else {
                    orderDetailsHTML += "<tr><td colspan='5' class='text-center'>No items available</td></tr>";
                }
                const itemTotal = data.amount;

                orderDetailsHTML += `
                                </tbody>
                            </table>
                    <h5 class="mt-3"><strong>Total Amount:</strong> ${itemTotal.toFixed(2)} JD</h5>
                        `;

                document.getElementById("orderDetails").innerHTML = orderDetailsHTML;

            } catch (error) {
                console.error("Error fetching order details:", error);
                document.getElementById("orderDetails").innerHTML = "<p class='text-danger'>Error loading order details.</p>";
            }
        }


        // Fetch order details when the page loads
        document.addEventListener("DOMContentLoaded", fetchOrderDetails);
    </script>

</body>
</html>
